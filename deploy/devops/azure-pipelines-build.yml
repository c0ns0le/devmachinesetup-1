# Build pipeline to validate install-script and ARM templates used for deployment
# on a continuous basis while changing them.
# Future-plan: attempt to run quick tests on ACI instances for the scripts

variables:
- name: subscriptionId
  value: '${{ parameters.pDevSubscriptionId }}'
- name: vpnPipeCertThumbprints
  value: '[ { "name": "mszcooldevpipevpnCA.cer", "properties": { "PublicCertData": "${{ parameters.pVpnCaCertPubEncoded }}" } } ]'

steps:
- script: |
    echo "##vso[task.setvariable variable=varRgNameNetworking]${{ parameters.pRgNamePrefix }}.Networking"
    echo "##vso[task.setvariable variable=varRgNameVirtualMachines]${{ parameters.pRgNamePrefix }}.DevVms"

- script: |
    echo "networking RG = $(varRgNameNetworking)"
    echo "VMs RG = '$(varRgNameVirtualMachines)"
    echo "gateway client root cert json = $(vpnPipeCertThumbprints)"

- task: AzureResourceGroupDeployment@2
  inputs:
    azureSubscription: '$(subscriptionId)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(varRgNameNetworking)'
    location: 'West Europe'
    templateLocation: 'Linked artifact'
    csmFile: './azuredeploy/azuredeploy.networking.json'
    overrideParameters: '-pVnetName ${{ parameters.pVnetName }} -pGatewayPipDnsLabel ${{ parameters.pVpnDnsName }} -pGatewayClientRootCerts $(vpnPipeCertThumbprints)'
    deploymentMode: Validation
    outputVariable: netDeployOutput

- task: AzureResourceGroupDeployment@2
  inputs:
    azureSubscription: '$(subscriptionId)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(varRgNameVirtualMachines)'
    location: 'West Europe'
    templateLocation: 'Linked artifact'
    csmFile: './azuredeploy/azuredeploy.vm.linux.json'
    overrideParameters: '-pVmStorageAccountUri "${{ parameters.pStorageAccount }}" -pAdminUserName "${{ parameters.pAdminUserName }}" -pAdminSshKey "${{ parameters.pAdminUserSshPubKey }}" -pVnetSubnetId "${{ parameters.pVnetSubnetId }}"'
    deploymentMode: Validation
    outputVariable: lxDeployOutput

- task: AzureResourceGroupDeployment@2
  inputs:
    azureSubscription: '$(subscriptionId)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(varRgNameVirtualMachines)'
    location: 'West Europe'
    templateLocation: 'Linked artifact'
    csmFile: './azuredeploy/azuredeploy.vm.windows.json'
    overrideParameters: '-pVmStorageAccountUri "${{ parameters.pStorageAccount }}" -pAdminUserName "${{ parameters.pAdminUserName }}" -pAdminPassword "${{ parameters.pAdminUserPassword }}" -pVnetSubnetId "${{ parameters.pVnetSubnetId }}"'
    deploymentMode: Validation
    outputVariable: winDeployOutput

- script: |
    echo "output vnet = $(netDeployOutput)"
    echo "output lxvm = $(lxDeployOutput)"
    echo "output winv = $(winDeployOutput)"

- task: PowerShell@2
  displayName: Validating Install-Windows.ps1 syntax...
  inputs:
    filePath: './devops/Test-PowerShellSyntax.ps1' 
    arguments: '-relativePath ./src/Install-WindowsMachine.ps1'

- task: Bash@3
  displayName: Validating Install-Ubuntu.sh syntax...
  inputs:
    filePath: './devops/test-bashscriptsyntax.sh' 
    arguments: './src/Install-Ubuntu.sh'

- task: CopyFiles@2
  inputs:
    Contents: |
      **
      !.vs/**
      !.git/**
      !.gitignore
      !.gitattributes
      !README.md
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'