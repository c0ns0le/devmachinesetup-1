# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  name: devPipeCertThumbprints
  value: '[ { "name": "mszcooldevpipevpnCA.cer", "properties": { "PublicCertData": "$(param.DevCaCertPub)" } } ]'

steps:
- script: |
    echo "##vso[task.setvariable variable=varRgNameNetworking]$(param.DevRgPrefix).Networking"
    echo "##vso[task.setvariable variable=varRgNameVirtualMachines]$(param.DevRgPrefix).DevVms"

- task: AzureCLI@1
  inputs:
    azureSubscription: 'Marioszp''s Azure (MSFT)'
    scriptLocation: 'scriptPath'
    scriptPath: './devops/util_rgcreate.sh'
    arguments: '$(varRgNameNetworking) $(param.DevLocation)'
    useGlobalConfig: true

- task: AzureCLI@1
  inputs:
    azureSubscription: 'Marioszp''s Azure (MSFT)'
    scriptLocation: 'scriptPath'
    scriptPath: './devops/util_rgcreate.sh'
    arguments: '$(varRgNameVirtualMachines) $(param.DevLocation)'
    useGlobalConfig: true

- script: |
    echo "networking RG = $(varRgNameNetworking)"
    echo "gateway client root cert json = $(devPipeCertThumbprints)"

- task: AzureResourceGroupDeployment@2
  inputs:
    azureSubscription: 'Marioszp''s Azure (MSFT)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(varRgNameNetworking)'
    location: 'West Europe'
    templateLocation: 'Linked artifact'
    csmFile: './azuredeploy/azuredeploy.networking.json'
    overrideParameters: 'pVnetName=devPipeTestVnet -pGatewayPipDnsLabel=mszdevvmsdevpipetestdns -pGatewayClientRootCerts=''($devPipeCertThumbprints)'''
    deploymentMode: 'Validation'
    outputVariable: netDeployOutput

- script: echo "output = $(netDeployOutput)"